---
layout: post
title:  "試用 haykyll"
date:   2015-10-12 16:00:24
categories: TIL
---
# haskell 版的 jekyll = hakyll，

低調的 Ruby 跟覺醒的 Haskell 有很多想法上的相互影響，來試試看 hakyll 的威力

# 安裝 haykll

得先裝好 ghc 就不說了，先裝 capal-install cli 

`$ brew install cabal-install`

裝好 cabal 是沒東西的，得先 update

`$ cabal update

update 好之後就能安裝 hakyll 了

`$ cabal install hakyll`

註：hakyll 是 Jasper Van der Jeugt 的作品

http://jaspervdj.be/hakyll/

接下來便能使用 hakyll-init 的 cli 建立幾單的範例

得確認 PATH 路徑有包含 $HOME/.cabal/bin 才能正常使用

`hakyll-init hakyll-example`
`cat ./hakyll-example/site.hs`

可以看看 site.hs 的內容，語法簡潔/又清楚

```haskell
--------------------------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
import           Data.Monoid (mappend)
import           Hakyll


--------------------------------------------------------------------------------
main :: IO ()
main = hakyll $ do
    match "images/*" $ do
        route   idRoute
        compile copyFileCompiler

    match "css/*" $ do
        route   idRoute
        compile compressCssCompiler

    match (fromList ["about.rst", "contact.markdown"]) $ do
        route   $ setExtension "html"
        compile $ pandocCompiler
            >>= loadAndApplyTemplate "templates/default.html" defaultContext
            >>= relativizeUrls

    match "posts/*" $ do
        route $ setExtension "html"
        compile $ pandocCompiler
            >>= loadAndApplyTemplate "templates/post.html"    postCtx
            >>= loadAndApplyTemplate "templates/default.html" postCtx
            >>= relativizeUrls

    create ["archive.html"] $ do
        route idRoute
        compile $ do
            posts <- recentFirst =<< loadAll "posts/*"
            let archiveCtx =
                    listField "posts" postCtx (return posts) `mappend`
                    constField "title" "Archives"            `mappend`
                    defaultContext

            makeItem ""
                >>= loadAndApplyTemplate "templates/archive.html" archiveCtx
                >>= loadAndApplyTemplate "templates/default.html" archiveCtx
                >>= relativizeUrls


    match "index.html" $ do
        route idRoute
        compile $ do
            posts <- recentFirst =<< loadAll "posts/*"
            let indexCtx =
                    listField "posts" postCtx (return posts) `mappend`
                    constField "title" "Home"                `mappend`
                    defaultContext

            getResourceBody
                >>= applyAsTemplate indexCtx
                >>= loadAndApplyTemplate "templates/default.html" indexCtx
                >>= relativizeUrls

    match "templates/*" $ compile templateCompiler


--------------------------------------------------------------------------------
postCtx :: Context String
postCtx =
    dateField "date" "%B %e, %Y" `mappend`
    defaultContext
```

使用前先編譯好 site.hs 檔案

`cd hakyll-example`
`ghc --make -threaded site.hs`

開始編譯

```log
[1 of 1] Compiling Main             ( site.hs, site.o )
Linking site ...
```

完成後就能使用了

`./site build`

開始生檔～site generated
```
Initialising...
  Creating store...
  Creating provider...
  Running rules...
Checking for out-of-date items
Compiling
  updated templates/default.html
  updated about.rst
  updated templates/post.html
  updated posts/2012-08-12-spqr.markdown
  updated posts/2012-10-07-rosa-rosa-rosam.markdown
  updated posts/2012-11-28-carpe-diem.markdown
  updated posts/2012-12-07-tu-quoque.markdown
  updated templates/archive.html
  updated templates/post-list.html
  updated archive.html
  updated contact.markdown
  updated css/default.css
  updated images/haskell-logo.png
  updated index.html
Success
```

可以即時觀看

`./site watch`
 
預設是 8000 port 

`http://localhost:8000/`



